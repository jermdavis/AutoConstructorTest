<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)bin\$(ConfigurationName)\AutoConstructorTest.Tests.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AutoConstructorTest.Tests" #>
<#@ output extension=".gen.cs" #>
// **
// ** Generated code - do not edit
// **
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

namespace AutoConstructorTest.Tests
{
<#
	string path = this.Host.ResolveAssemblyReference(@"$(ProjectDir)bin\$(ConfigurationName)");
	ConstructorTestHelper.InitialiseTestHelper(path);
	var assembly = ConstructorTestHelper.FetchAssembly(path + @"\AutoConstructorTest.Examples.dll");
	var types = ConstructorTestHelper.FetchTypesToTest(assembly);
	foreach(var typeToTest in types)
    {
#>

	[TestClass]
	[TestCategory("AutoGenerated")]
	public class <#= typeToTest.Name #>_GeneratedTests
	{

<#
		var constructors = ConstructorTestHelper.FetchConstructorsToTest(typeToTest);
		foreach(var constructor in constructors)
        {
			var parameters = constructor.GetParameters();
			foreach(var nullParameter in parameters)
            {
				if(nullParameter.ParameterType.IsValueType) continue;
#>
		[TestMethod]
		[ExpectedException(typeof(ArgumentNullException))]
		public void <#= typeToTest.Name #>_Constructor_<#= parameters.Count() #>Params_<#= nullParameter.Name #>_IsNull_Throws()
		{
<#
				foreach(var parameter in parameters)
                {
					if(parameter.Name == nullParameter.Name)
                    {
#>
				<#= parameter.ParameterType.FullName #> <#= parameter.Name #> = null;
<#
                    }
					else
                    {
#>
				var <#= parameter.Name #> = <#= ConstructorTestHelper.FetchDefaultValue(parameter) #>;
<#
                    }
                }
#>

				var sut = new <#= typeToTest.FullName #>(<# bool first = true; foreach(var p in constructor.GetParameters()) {#><# if(!first) {#>, <#} first = false; #><#=p.Name#><# } #>);
		}

<#
            }
        }
#>
	}
<#
    }
#>

}